Shader "OCB/Testing"
{
    Properties
    {
        _Color("Color", Color) = (1,1,1,1)
        // _EmissionColor("Emissive Color", Color) = (0,0,0,1)
        _Transparency("Transparency", Range(0, 1)) = 0.5
        // _MainTex("Albedo", 2D) = "white" { }
        // _Normal("Normal", 2D) = "white" { }
        // _Emissive("Emissive", 2D) = "black" { }
        // _MRAO("MRAO", 2D) = "white" { }
        // _MetallicFactor("Metallic Multiplier", Range(0, 2)) = 1
        // _MetallicInvertor("Metallic Invertor", Range(0, 2)) = 1
        // _SmoothnessFactor("Smoothness Multiplier", Range(0, 2)) = 1
        // _SmoothnessInvertor("Smoothness Invertor", Range(0, 2)) = 1
        // _OcclusionFactor("Occlusion Multiplier", Range(0, 2)) = 1
        // _OcclusionInvertor("Occlusion Invertor", Range(0, 2)) = 1

        // Blending state
        [HideInInspector] _Mode("__mode", Float) = 0.0
        [HideInInspector] _SrcBlend("__src", Float) = 1.0
        [HideInInspector] _DstBlend("__dst", Float) = 0.0
        [HideInInspector] _ZWrite("__zw", Float) = 1.0

    }

    CGINCLUDE
        #define UNITY_SETUP_BRDF_INPUT MetallicSetup
    ENDCG

    SubShader
    {
        Tags { "RenderType"="Transparent" "Queue"="2000" }

        Blend [_SrcBlend] [_DstBlend]
        ZWrite [_ZWrite]
        
        CGPROGRAM
        // Physically based Standard lighting model, and enable shadows on all light types
        #pragma surface surf Standard fullforwardshadows alpha:blend keepalpha

        // Use shader model 3.0 target, to get nicer looking lighting
        #pragma target 3.0

            // #pragma shader_feature_local _NORMALMAP
            #pragma shader_feature_local _ _ALPHATEST_ON _ALPHABLEND_ON _ALPHAPREMULTIPLY_ON
            // #pragma shader_feature_fragment _EMISSION
            // #pragma shader_feature_local _METALLICGLOSSMAP
            // #pragma shader_feature_local_fragment _DETAIL_MULX2
            // #pragma shader_feature_local_fragment _SMOOTHNESS_TEXTURE_ALBEDO_CHANNEL_A
            // #pragma shader_feature_local_fragment _SPECULARHIGHLIGHTS_OFF
            // #pragma shader_feature_local_fragment _GLOSSYREFLECTIONS_OFF
            // #pragma shader_feature_local _PARALLAXMAP

            #pragma multi_compile_fwdbase
            #pragma multi_compile_fog
            #pragma multi_compile_instancing

        // sampler2D _MainTex;
        // sampler2D _Normal;
        // sampler2D _Emissive;
        // sampler2D _MRAO;

        struct Input
        {
        float foo;
        //     float2 uv_MainTex;
        //     float2 uv_Normal;
        //     float2 uv_Emissive;
        //     float2 uv_MRAO;
        };

        fixed4 _Color;
        fixed _Transparency;
        // fixed4 _EmissionColor;
        // fixed _EmissionMultiply;
        // fixed _MetallicFactor;
        // fixed _MetallicInvertor;
        // fixed _SmoothnessFactor;
        // fixed _SmoothnessInvertor;
        // fixed _OcclusionFactor;
        // fixed _OcclusionInvertor;

        // Add instancing support for this shader. You need to check 'Enable Instancing' on materials that use the shader.
        // See https://docs.unity3d.com/Manual/GPUInstancing.html for more information about instancing.
        // #pragma instancing_options assumeuniformscaling
        UNITY_INSTANCING_BUFFER_START(Props)
            // put more per-instance properties here
        UNITY_INSTANCING_BUFFER_END(Props)

        void surf (Input IN, inout SurfaceOutputStandard o)
        {
            // fixed4 mrao = tex2D(_MRAO, IN.uv_MRAO);
            // fixed4 albedo = tex2D(_MainTex, IN.uv_MainTex);
            // fixed4 emissive = tex2D(_Emissive, IN.uv_Emissive);
            o.Albedo = _Color.rgb; // +(_Color.rgb - albedo.rgb) * mrao.b;
            // o.Emission = emissive.rgb * _EmissionColor.rgb * _EmissionMultiply;
            // o.Normal = UnpackNormal(tex2D(_Normal, IN.uv_Normal));
            // o.Metallic = 1 - (1 - mrao.r * _MetallicFactor) * _MetallicInvertor;
            // o.Smoothness = 1 - (1 - mrao.a * _SmoothnessInvertor)* _SmoothnessFactor;
            // o.Occlusion = 1 - (1 - mrao.g * _OcclusionFactor) * _OcclusionInvertor;
            o.Alpha = _Transparency;
        }
        ENDCG
    }
    FallBack "Diffuse"
    CustomEditor "LiquidShaderGUI"
}
